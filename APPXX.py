import os
import time
import threading
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import tkinter.font as tkFont
import requests
from packaging import version
from sam_translate.sam_translate import set_root, set_sam_mini_chat_globals, create_sam_mini_chat
from config import load_config, save_config
import ctypes
from ctypes import wintypes

try:
    import psutil
except ImportError:
    psutil = None

from PIL import Image, ImageChops, ImageTk
from autoit_module import auto_it_function
from settings_dialog import open_settings, center_window

# Load c·∫•u h√¨nh
config = load_config()
XAI_API_KEY = config.get("xai_api_key", "")
CHATGPT_API_KEY = config.get("chatgpt_api_key", "")
LLM_API_KEY = config.get("llm_api_key", "")
TRANSLATION_ONLY = config.get("translation_only", True)
DEFAULT_TARGET_LANG = config.get("default_target_lang", "vi")
DEFAULT_TELEGRAM_PATH = config.get("telegram_path", "")
MARKER_IMAGE_PATH = os.path.join(os.getcwd(), "marker_image.png")
arrange_width = config.get("arrange_width", 500)
arrange_height = config.get("arrange_height", 504)

# Th∆∞ vi·ªán Windows API
user32 = ctypes.windll.user32

# H√†m l·∫•y handle c·ª≠a s·ªï t·ª´ PID
def get_window_handle_by_pid(pid):
    handles = []
    @ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_int, ctypes.c_int)
    def enum_callback(hwnd, lParam):
        if user32.IsWindow(hwnd) and user32.IsWindowVisible(hwnd):
            window_pid = wintypes.DWORD()
            user32.GetWindowThreadProcessId(hwnd, ctypes.byref(window_pid))
            if window_pid.value == pid:
                handles.append(hwnd)
        return True
    user32.EnumWindows(enum_callback, 0)
    return handles[0] if handles else None

# H√†m ch·ª•p ·∫£nh c·ª≠a s·ªï
def capture_window(hwnd):
    gdi32 = ctypes.windll.gdi32
    rect = wintypes.RECT()
    user32.GetWindowRect(hwnd, ctypes.byref(rect))
    width = rect.right - rect.left
    height = rect.bottom - rect.top
    hwindc = user32.GetWindowDC(hwnd)
    srcdc = gdi32.CreateCompatibleDC(hwindc)
    bmp = gdi32.CreateCompatibleBitmap(hwindc, width, height)
    gdi32.SelectObject(srcdc, bmp)
    result = user32.PrintWindow(hwnd, srcdc, 2)
    if result != 1:
        print("Consolog [WARNING]: PrintWindow kh√¥ng th√†nh c√¥ng ho·∫∑c ch·ªâ ch·ª•p ƒë∆∞·ª£c 1 ph·∫ßn.")

    class BITMAPINFOHEADER(ctypes.Structure):
        _fields_ = [
            ("biSize", ctypes.c_uint32),
            ("biWidth", ctypes.c_int32),
            ("biHeight", ctypes.c_int32),
            ("biPlanes", ctypes.c_uint16),
            ("biBitCount", ctypes.c_uint16),
            ("biCompression", ctypes.c_uint32),
            ("biSizeImage", ctypes.c_uint32),
            ("biXPelsPerMeter", ctypes.c_int32),
            ("biYPelsPerMeter", ctypes.c_int32),
            ("biClrUsed", ctypes.c_uint32),
            ("biClrImportant", ctypes.c_uint32),
        ]

    bmi = BITMAPINFOHEADER()
    bmi.biSize = ctypes.sizeof(BITMAPINFOHEADER)
    bmi.biWidth = width
    bmi.biHeight = -height
    bmi.biPlanes = 1
    bmi.biBitCount = 32
    bmi.biCompression = 0

    buffer_len = width * height * 4
    buffer = ctypes.create_string_buffer(buffer_len)
    _ = gdi32.GetDIBits(srcdc, bmp, 0, height, buffer, ctypes.byref(bmi), 0)

    image = Image.frombuffer('RGBA', (width, height), buffer, 'raw', 'BGRA', 0, 1)

    gdi32.DeleteObject(bmp)
    gdi32.DeleteDC(srcdc)
    user32.ReleaseDC(hwnd, hwindc)
    return image

# Language dictionary
lang = {
    "title": "Telegram Auto Tool",
    "setting": "‚öôÔ∏è Setting",
    "log_label": "Log:",
    "telegram_path_label": "Telegram Path:",
    "msg_error_path": "Invalid path!",
    "save_telegram_path": "üíæ Save Telegram Path"
}

# Ki·ªÉm tra th∆∞ vi·ªán psutil
if not psutil:
    print("Consolog: Warning - psutil is not installed! Please install with 'pip install psutil' to check live via PID.")

# Ghi log
def log_message(msg):
    text_log.insert(tk.END, msg + "\n")
    text_log.see(tk.END)
    print(f"[LOG] {msg}")

# L∆∞u ƒë∆∞·ªùng d·∫´n Telegram
def save_telegram_path():
    global DEFAULT_TELEGRAM_PATH
    telegram_path = telegram_path_entry.get().strip()
    print(f"Consolog: L∆∞u Telegram Path t·ª´ m√†n h√¨nh ch√≠nh: {telegram_path}")
    if os.path.isfile(telegram_path):
        config["telegram_path"] = telegram_path
        DEFAULT_TELEGRAM_PATH = telegram_path
        save_config(config)
        log_message("ƒê√£ l∆∞u ƒë∆∞·ªùng d·∫´n Telegram!")
    else:
        log_message("ƒê∆∞·ªùng d·∫´n Telegram kh√¥ng h·ª£p l·ªá!")

# ƒê√≥ng ·ª©ng d·ª•ng
def on_closing():
    print("Consolog: ƒê√≥ng ·ª©ng d·ª•ng...")
    root.destroy()

# Kh·ªüi t·∫°o giao di·ªán ch√≠nh
def init_main_ui():
    global root, text_log, telegram_path_entry, DEFAULT_TELEGRAM_PATH, XAI_API_KEY, CHATGPT_API_KEY, LLM_API_KEY
    root = tk.Tk()
    root.title("Telegram Auto")
    root.geometry("800x600")
    center_window(root, 800, 600)

    # T·∫°o frame ch√≠nh
    main_frame = tk.Frame(root)
    main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # T·∫°o frame cho ƒë∆∞·ªùng d·∫´n Telegram
    telegram_frame = tk.Frame(main_frame)
    telegram_frame.pack(fill=tk.X, pady=5)
    tk.Label(telegram_frame, text="ƒê∆∞·ªùng d·∫´n Telegram:").pack(side=tk.LEFT)
    telegram_path_entry = tk.Entry(telegram_frame, width=50)
    telegram_path_entry.pack(side=tk.LEFT, padx=5)
    telegram_path_entry.insert(0, DEFAULT_TELEGRAM_PATH)
    btn_browse = tk.Button(telegram_frame, text="Browse", command=save_telegram_path)
    btn_browse.pack(side=tk.LEFT)

    # T·∫°o frame cho log
    log_frame = tk.Frame(main_frame)
    log_frame.pack(fill=tk.BOTH, expand=True, pady=5)
    text_log = tk.Text(log_frame, height=20)
    text_log.pack(fill=tk.BOTH, expand=True)
    text_log.name = 'text_log'  # ƒê·∫∑t t√™n cho widget ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p sau n√†y

    # T·∫°o frame cho c√°c n√∫t
    button_frame = tk.Frame(main_frame)
    button_frame.pack(fill=tk.X, pady=5)
    btn_settings = tk.Button(button_frame, text="Settings", command=lambda: open_settings(root))
    btn_settings.pack(side=tk.LEFT, padx=5)

    print("Consolog: Ki·ªÉm tra Telegram Path t·ª´ m√†n h√¨nh ch√≠nh thay v√¨ Settings")
    
    if not DEFAULT_TELEGRAM_PATH:
        log_message("ƒê∆∞·ªùng d·∫´n Telegram ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng nh·∫≠p v√† l∆∞u!")
        save_telegram_path()
        if not DEFAULT_TELEGRAM_PATH:
            log_message("ƒê∆∞·ªùng d·∫´n Telegram l√† b·∫Øt bu·ªôc ƒë·ªÉ ti·∫øp t·ª•c!")
            return

    print("Consolog: Ki·ªÉm tra API Keys")
    if not XAI_API_KEY or not CHATGPT_API_KEY or not LLM_API_KEY:
        log_message("API Key ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng nh·∫≠p trong Settings!")
        open_settings(root)
        if not XAI_API_KEY or not CHATGPT_API_KEY or not LLM_API_KEY:
            log_message("API Key l√† b·∫Øt bu·ªôc ƒë·ªÉ ti·∫øp t·ª•c!")
            return

    try:
        set_root(root)
        set_sam_mini_chat_globals(XAI_API_KEY, CHATGPT_API_KEY, LLM_API_KEY, DEFAULT_TARGET_LANG)
        create_sam_mini_chat()
        print("Consolog: Sam Translate v√† Sam Mini Chat ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông t·ª± ƒë·ªông khi ·ª©ng d·ª•ng b·∫Øt ƒë·∫ßu.")
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói khi kh·ªüi ƒë·ªông Sam Translate ho·∫∑c Sam Mini Chat: {e}")

    root.mainloop()

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
print("Consolog: ·ª®ng d·ª•ng kh·ªüi ch·∫°y.")
init_main_ui()